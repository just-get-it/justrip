# Generated by Django 2.0 on 2021-12-23 19:56

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import main.models
import mapbox_location_field.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Car',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, null=True)),
                ('licence_plate_no', models.CharField(max_length=100, null=True)),
                ('rc_book_front', models.FileField(blank=True, null=True, upload_to=main.models.upload_car_documents_path)),
                ('rc_book_back', models.FileField(blank=True, null=True, upload_to=main.models.upload_car_documents_path)),
                ('car_year', models.IntegerField(blank=True, null=True)),
                ('owner_name', models.CharField(blank=True, max_length=200, null=True)),
                ('rc_book_expiry_date', models.DateField(blank=True, null=True)),
                ('chassi_number', models.CharField(blank=True, max_length=17, null=True)),
                ('insurance_no', models.CharField(blank=True, max_length=100, null=True)),
                ('insurance_picture', models.FileField(blank=True, null=True, upload_to=main.models.upload_car_documents_path)),
                ('insurance_expiry_date', models.DateField(blank=True, null=True)),
                ('insurance_company', models.CharField(blank=True, max_length=200, null=True)),
                ('fitness_certificate', models.FileField(blank=True, null=True, upload_to=main.models.upload_car_documents_path)),
                ('fitness_expiry_date', models.DateField(blank=True, null=True)),
                ('cab_noc_agreement', models.FileField(blank=True, null=True, upload_to=main.models.upload_car_documents_path)),
                ('car_front', models.FileField(blank=True, null=True, upload_to=main.models.upload_car_path)),
                ('car_back', models.FileField(blank=True, null=True, upload_to=main.models.upload_car_path)),
                ('car_side_left', models.FileField(blank=True, null=True, upload_to=main.models.upload_car_path)),
                ('car_side_right', models.FileField(blank=True, null=True, upload_to=main.models.upload_car_path)),
                ('car_interior_front', models.FileField(blank=True, null=True, upload_to=main.models.upload_car_path)),
                ('car_interior_back', models.FileField(blank=True, null=True, upload_to=main.models.upload_car_path)),
                ('car_dickie', models.FileField(blank=True, null=True, upload_to=main.models.upload_car_path)),
                ('is_verified', models.BooleanField(default=False)),
                ('registered_on', models.DateTimeField(default=datetime.datetime.today)),
            ],
        ),
        migrations.CreateModel(
            name='CarCompany',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='CarType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('picture', models.FileField(upload_to=main.models.upload_car_path)),
                ('justcab_commision', models.FloatField(blank=True, null=True)),
                ('description', models.CharField(max_length=400)),
                ('local_morning_surge_charge', models.FloatField(blank=True, null=True)),
                ('local_evening_surge_charge', models.FloatField(blank=True, null=True)),
                ('local_night_surge_charge', models.FloatField(blank=True, null=True)),
                ('outstation_morning_surge_charge', models.FloatField(blank=True, null=True)),
                ('outstation_evening_surge_charge', models.FloatField(blank=True, null=True)),
                ('outstation_night_surge_charge', models.FloatField(blank=True, null=True)),
                ('redeem_wallet_amount', models.IntegerField(default=500)),
                ('local_waiting_per_min', models.IntegerField(blank=True, null=True)),
                ('local_oneway_min_km', models.IntegerField()),
                ('local_oneway_min_charge', models.IntegerField()),
                ('local_oneway_rate_per_km', models.IntegerField()),
                ('local_round_min_km', models.IntegerField()),
                ('local_round_min_charge', models.IntegerField()),
                ('local_round_rate_per_km', models.IntegerField()),
                ('local_round_driver_allowance', models.IntegerField()),
                ('outstation_waiting_per_day', models.IntegerField(blank=True, null=True)),
                ('outstation_oneway_min_km', models.IntegerField()),
                ('outstation_oneway_min_charge', models.IntegerField()),
                ('outstation_oneway_rate_per_km', models.IntegerField()),
                ('outstation_oneway_stay_charge', models.IntegerField(default=500)),
                ('outstation_round_min_km', models.IntegerField()),
                ('outstation_round_min_charge', models.IntegerField()),
                ('outstation_round_rate_per_km', models.IntegerField()),
                ('outstation_round_driver_allowance', models.IntegerField()),
                ('outstation_round_stay_charge', models.IntegerField(default=500)),
                ('permit', models.FloatField(default=0)),
                ('toll', models.FloatField(default=20)),
                ('is_active', models.BooleanField(default=True)),
                ('company', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.CarCompany')),
            ],
        ),
        migrations.CreateModel(
            name='Charges',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('trip_type', models.CharField(choices=[('SELF_DRIVING', 'Self Drive'), ('RENTAL', 'Rental'), ('POOLING', 'Pooling')], default='RENTAL', max_length=100)),
                ('trip_variant', models.CharField(choices=[('LOCAL', 'Local'), ('OUTSTATION', 'Outstation'), ('HOURLY', 'Hourly')], max_length=100)),
                ('trip_way', models.CharField(choices=[('ONEWAY', 'Oneway'), ('ROUND', 'Round')], max_length=100)),
                ('morning_traffic_surge_charge', models.FloatField(default=1)),
                ('evening_traffic_surge_charge', models.FloatField(default=1)),
                ('night_traffic_surge_charge', models.FloatField(default=1)),
                ('easy_I_route_surge', models.FloatField(blank=True, default=1, help_text='values should be in % (percentage)', null=True)),
                ('easy_II_route_surge', models.FloatField(blank=True, default=1, help_text='values should be in % (percentage)', null=True)),
                ('remote_I_route_surge', models.FloatField(blank=True, default=1, help_text='values should be in % (percentage)', null=True)),
                ('remote_II_route_surge', models.FloatField(blank=True, default=1, help_text='values should be in % (percentage)', null=True)),
                ('petrol_fuel_surge', models.FloatField(blank=True, default=1, null=True)),
                ('disel_fuel_surge', models.FloatField(blank=True, default=1, null=True)),
                ('cng_fuel_surge', models.FloatField(blank=True, default=1, null=True)),
                ('electric_fuel_surge', models.FloatField(blank=True, default=1, null=True)),
                ('entertainment_charge', models.FloatField(blank=True, default=1, null=True)),
                ('ride_time_charge', models.FloatField(default=1)),
                ('vehical_waiting_charge', models.FloatField(default=1)),
                ('driver_waiting_charge', models.FloatField(default=1)),
                ('driver_waiting_allowances_charge', models.FloatField(default=1)),
                ('driver_waiting_night_allowances_charge', models.FloatField(default=1)),
                ('driver_waiting_stay_allowances_charge', models.FloatField(default=1)),
                ('min_base_charge', models.FloatField()),
                ('Kms_covered_in_base_fare', models.FloatField(default=1)),
                ('minimum_km', models.FloatField(default=1)),
                ('rate_per_km', models.FloatField(default=1)),
                ('redeem_wallet_amount', models.FloatField(blank=True, default=0, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CorporateCustomerProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gst', models.IntegerField(blank=True, null=True)),
                ('pan', models.CharField(blank=True, max_length=400, null=True)),
                ('pan_image', models.FileField(blank=True, null=True, upload_to=main.models.upload_pan_path)),
            ],
        ),
        migrations.CreateModel(
            name='Coupon',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('trip_type', models.CharField(choices=[('RENTAL', 'Rental'), ('SELF_DRIVING', 'Self Drive'), ('POOLING', 'Pooling')], default='RENTAL', max_length=100)),
                ('trip_variant', models.CharField(choices=[('LOCAL', 'Local'), ('OUTSTATION', 'Outstation'), ('HOURLY', 'Hourly')], default='LOCAL', max_length=100)),
                ('trip_way', models.CharField(choices=[('ONEWAY', 'Oneway'), ('ROUND', 'Round')], max_length=100)),
                ('coupon_name', models.CharField(max_length=100)),
                ('coupon_code', models.PositiveIntegerField()),
                ('coupon_value', models.PositiveIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='CustomerProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profile_picture', models.FileField(blank=True, null=True, upload_to=main.models.upload_profile_path)),
                ('address', mapbox_location_field.models.LocationField(blank=True, map_attrs={'center': [78.74273, 23.424107], 'marker_color': 'blue', 'placeholder': 'Address', 'zoom': 3}, null=True)),
                ('address_text', models.CharField(blank=True, max_length=400, null=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('is_corporate', models.BooleanField(default=False)),
                ('corporate_cust_discount', models.FloatField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='detail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('email', models.EmailField(max_length=254)),
                ('password', models.CharField(max_length=255)),
                ('contact', models.BigIntegerField(null=True)),
                ('gender', models.CharField(max_length=100)),
                ('is_staff', models.BooleanField(default=False)),
                ('user_otp', models.CharField(blank=True, max_length=255, null=True)),
                ('user_otp_time', models.DateTimeField(blank=True, null=True)),
                ('user_otp_key', models.TextField(blank=True, null=True)),
                ('user_otp_verify', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='DriverProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, null=True)),
                ('phone', models.CharField(max_length=100, null=True)),
                ('picture', models.FileField(blank=True, null=True, upload_to=main.models.upload_profile_path)),
                ('aadhar_front_image', models.FileField(blank=True, null=True, upload_to=main.models.upload_aadhar_path)),
                ('aadhar_back_image', models.FileField(blank=True, null=True, upload_to=main.models.upload_aadhar_path)),
                ('aadhar_card_number', models.CharField(blank=True, max_length=100, null=True)),
                ('police_verification', models.FileField(blank=True, null=True, upload_to=main.models.upload_police_verification_path)),
                ('driving_licence_front', models.FileField(blank=True, null=True, upload_to=main.models.upload_licence_path)),
                ('driving_licence_back', models.FileField(blank=True, null=True, upload_to=main.models.upload_licence_path)),
                ('driving_licence_number', models.CharField(blank=True, max_length=200, null=True)),
                ('driving_licence_expiry_date', models.DateField(blank=True, null=True)),
                ('taxi_badge_number', models.CharField(blank=True, max_length=200, null=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('current_location', models.CharField(blank=True, max_length=200, null=True)),
                ('cur_address_coords', mapbox_location_field.models.LocationField(blank=True, map_attrs={'center': [78.74273, 23.424107], 'marker_color': 'blue', 'placeholder': 'Address Coordinates', 'zoom': 3}, null=True)),
                ('request_location', models.CharField(blank=True, max_length=200, null=True)),
                ('request_loc_coords', mapbox_location_field.models.LocationField(blank=True, map_attrs={'center': [78.74273, 23.424107], 'marker_color': 'blue', 'placeholder': 'Address Coordinates', 'zoom': 3}, null=True)),
                ('home_location', models.CharField(blank=True, max_length=200, null=True)),
                ('home_loc_coords', mapbox_location_field.models.LocationField(blank=True, map_attrs={'center': [78.74273, 23.424107], 'marker_color': 'blue', 'placeholder': 'Address Coordinates', 'zoom': 3}, null=True)),
                ('has_requested', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=300)),
                ('time', models.DateTimeField(auto_now_add=True)),
                ('username', models.CharField(max_length=200)),
                ('email', models.EmailField(max_length=254)),
                ('car', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='events', to='main.Car')),
                ('car_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='events', to='main.CarType')),
                ('customer', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='events', to='main.CustomerProfile')),
                ('driver', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='events', to='main.DriverProfile')),
            ],
        ),
        migrations.CreateModel(
            name='Fuel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fuel', models.CharField(choices=[('PETROL', 'Petrol'), ('DISEL', 'Disel'), ('CNG', 'CNG'), ('ELECTRIC', 'Electric')], max_length=100, unique=True)),
                ('priority', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Fuel_Route',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('frm', models.CharField(max_length=100)),
                ('to', models.CharField(max_length=100)),
                ('fuel_type', models.ManyToManyField(to='main.Fuel')),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=200, null=True)),
                ('link_id', models.IntegerField()),
                ('customer_profile', models.BooleanField(default=False)),
                ('owner_profile', models.BooleanField(default=False)),
                ('booking', models.BooleanField(default=False)),
                ('date', models.DateTimeField(auto_now=True)),
                ('seen', models.BooleanField(default=False)),
                ('to', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='main.detail')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='admin_notifications', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='OwnerProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profile_picture', models.FileField(blank=True, null=True, upload_to=main.models.upload_profile_path)),
                ('cheque_image', models.FileField(blank=True, null=True, upload_to=main.models.upload_cheque_path)),
                ('bank_account_no', models.CharField(blank=True, max_length=100, null=True)),
                ('ifsc_code', models.CharField(blank=True, max_length=100, null=True)),
                ('account_holders_name', models.CharField(blank=True, max_length=200, null=True)),
                ('is_owner', models.BooleanField(default=False)),
                ('is_vendor', models.BooleanField(default=False)),
                ('is_verified', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=False)),
                ('address_coords', mapbox_location_field.models.LocationField(blank=True, map_attrs={'center': [78.74273, 23.424107], 'marker_color': 'blue', 'placeholder': 'Address Coordinates', 'zoom': 3}, null=True)),
                ('address', models.CharField(blank=True, max_length=400, null=True)),
                ('state', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Route',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('destination', models.CharField(max_length=100)),
                ('route_type', models.CharField(choices=[('A-I', 'A-I'), ('A', 'A'), ('B-I', 'B-I'), ('B', 'B'), ('NONE', 'None')], default='NONE', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Tax',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('GST', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Toll_Permit_Parking',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('route_from', models.CharField(max_length=100)),
                ('route_to', models.CharField(max_length=100)),
                ('toll', models.PositiveIntegerField(default=0)),
                ('permit', models.PositiveIntegerField(default=0)),
                ('parking', models.PositiveIntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='TravellersInformation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('phone', models.CharField(max_length=20)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('address', models.CharField(max_length=400)),
                ('no_of_travellers', models.IntegerField()),
                ('no_of_bags', models.IntegerField()),
                ('special_instructions', models.CharField(blank=True, max_length=400, null=True)),
                ('carrier_required', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Trip',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('trip_no', models.CharField(default='0', max_length=100)),
                ('booking_date', models.DateField(default=datetime.datetime.today)),
                ('booking_time', models.TimeField(default=django.utils.timezone.now)),
                ('pickup_date', models.DateField()),
                ('pickup_time', models.TimeField()),
                ('drop_time', models.DateTimeField()),
                ('pickup_location', mapbox_location_field.models.LocationField(map_attrs={'center': [78.74273, 23.424107], 'marker_color': 'blue', 'placeholder': 'Pickup Location', 'zoom': 3}, null=True)),
                ('drop_location', mapbox_location_field.models.LocationField(map_attrs={'center': [78.74273, 23.424107], 'marker_color': 'red', 'placeholder': 'Drop Location', 'zoom': 3}, null=True)),
                ('pickup_address', models.CharField(blank=True, max_length=300)),
                ('pickup_city', models.CharField(blank=True, max_length=100)),
                ('pickup_state', models.CharField(blank=True, max_length=100)),
                ('drop_address', models.CharField(blank=True, max_length=300)),
                ('drop_city', models.CharField(blank=True, default='Mumbai', max_length=100)),
                ('drop_state', models.CharField(blank=True, default='Goa', max_length=100)),
                ('round_trip', models.BooleanField(default=False)),
                ('days', models.IntegerField(blank=True, null=True)),
                ('bill_amount', models.IntegerField(blank=True, null=True)),
                ('day_charges', models.IntegerField(blank=True, null=True)),
                ('extra_dist_charges', models.IntegerField(blank=True, null=True)),
                ('total_driver_allowance', models.IntegerField(blank=True, null=True)),
                ('fare', models.IntegerField(blank=True, null=True)),
                ('tax', models.IntegerField(blank=True, null=True)),
                ('tax_percent', models.IntegerField(blank=True, null=True)),
                ('vendor_amount', models.IntegerField(blank=True, null=True)),
                ('distance', models.IntegerField(blank=True, null=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('driver_is_visible', models.BooleanField(default=False)),
                ('traveller_is_visible', models.BooleanField(default=False)),
                ('start_otp', models.CharField(blank=True, max_length=10, null=True)),
                ('end_otp', models.CharField(blank=True, max_length=10, null=True)),
                ('is_started', models.BooleanField(default=False)),
                ('is_complete', models.BooleanField(default=False)),
                ('trip_perimeter', models.CharField(default='local', max_length=100)),
                ('toll_charges', models.IntegerField(blank=True, default=20, null=True)),
                ('is_canceled', models.BooleanField(default=False)),
                ('trip_type', models.CharField(choices=[('RENTAL', 'Rental'), ('SELF_DRIVING', 'Self Drive'), ('POOLING', 'Pooling')], default='RENTAL', max_length=100)),
                ('trip_variant', models.CharField(choices=[('LOCAL', 'Local'), ('OUTSTATION', 'Outstation'), ('HOURLY', 'Hourly')], default='LOCAL', max_length=100)),
                ('trip_way', models.CharField(choices=[('ONEWAY', 'Oneway'), ('ROUND', 'Round')], max_length=100)),
                ('car', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.Car')),
                ('car_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.CarType')),
                ('customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='trips', to='main.CustomerProfile')),
                ('driver', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='trips', to='main.DriverProfile')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='trips', to='main.OwnerProfile')),
                ('rejected_by', models.ManyToManyField(related_name='rejected_trips', to='main.OwnerProfile')),
            ],
        ),
        migrations.CreateModel(
            name='VehicalCompany',
            fields=[
                ('picture', models.FileField(upload_to=main.models.upload_vehicle_company_path)),
                ('name', models.CharField(max_length=100, primary_key=True, serialize=False, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='VehicalGroup',
            fields=[
                ('picture', models.FileField(upload_to=main.models.upload_vehicle_group_path)),
                ('name', models.CharField(max_length=100, primary_key=True, serialize=False, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='VehicalName',
            fields=[
                ('picture', models.FileField(upload_to=main.models.upload_vehicle_path)),
                ('name', models.CharField(max_length=100, primary_key=True, serialize=False, unique=True)),
                ('company', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.VehicalCompany')),
                ('group', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.VehicalGroup')),
            ],
        ),
        migrations.CreateModel(
            name='VehicalType',
            fields=[
                ('name', models.CharField(max_length=100, primary_key=True, serialize=False, unique=True)),
                ('picture', models.FileField(upload_to=main.models.upload_vehicle_type_path)),
                ('conviniance_charge', models.IntegerField(blank=True, default=10, help_text='In % (percentage)', null=True)),
                ('description', models.CharField(max_length=400)),
                ('is_active', models.BooleanField(default=True)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.VehicalGroup')),
            ],
        ),
        migrations.CreateModel(
            name='VendorTrip',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('trip_no', models.CharField(default='0', max_length=100)),
                ('pickup_date', models.DateField()),
                ('pickup_time', models.TimeField()),
                ('drop_time', models.DateTimeField()),
                ('pickup_location', mapbox_location_field.models.LocationField(blank=True, map_attrs={'center': [78.74273, 23.424107], 'marker_color': 'blue', 'placeholder': 'Pickup Location', 'zoom': 3}, null=True)),
                ('drop_location', mapbox_location_field.models.LocationField(blank=True, map_attrs={'center': [78.74273, 23.424107], 'marker_color': 'red', 'placeholder': 'Drop Location', 'zoom': 3}, null=True)),
                ('pickup_address', models.CharField(blank=True, max_length=300)),
                ('pickup_city', models.CharField(blank=True, max_length=100)),
                ('pickup_state', models.CharField(blank=True, max_length=100)),
                ('drop_address', models.CharField(blank=True, max_length=300)),
                ('drop_city', models.CharField(blank=True, default='Mumbai', max_length=100)),
                ('drop_state', models.CharField(blank=True, default='Goa', max_length=100)),
                ('round_trip', models.BooleanField(default=False)),
                ('days', models.IntegerField(blank=True, null=True)),
                ('vendor_amount', models.IntegerField(blank=True, null=True)),
                ('distance', models.IntegerField(blank=True, null=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('acceptor_is_visible', models.BooleanField(default=False)),
                ('is_started', models.BooleanField(default=False)),
                ('is_complete', models.BooleanField(default=False)),
                ('is_canceled', models.BooleanField(default=False)),
                ('is_demo', models.BooleanField(default=False)),
                ('car', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.Car')),
                ('car_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.CarType')),
                ('driver', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='vendor_trips', to='main.DriverProfile')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='vendor_trips', to='main.OwnerProfile')),
                ('poster', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='posted_trips', to='main.OwnerProfile')),
                ('rejected_by', models.ManyToManyField(blank=True, related_name='rejected_vendor_trips', to='main.OwnerProfile')),
            ],
        ),
        migrations.AddField(
            model_name='vehicalname',
            name='type',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.VehicalType'),
        ),
        migrations.AddField(
            model_name='vehicalcompany',
            name='group',
            field=models.ManyToManyField(to='main.VehicalGroup'),
        ),
        migrations.AddField(
            model_name='vehicalcompany',
            name='type',
            field=models.ManyToManyField(to='main.VehicalType'),
        ),
        migrations.AddField(
            model_name='travellersinformation',
            name='trip',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='traveller', to='main.Trip'),
        ),
        migrations.AddField(
            model_name='travellersinformation',
            name='vendor_trip',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='traveller', to='main.VendorTrip'),
        ),
        migrations.AddField(
            model_name='toll_permit_parking',
            name='vehicle_group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.VehicalGroup'),
        ),
        migrations.AddField(
            model_name='ownerprofile',
            name='states',
            field=models.ManyToManyField(blank=True, default=main.models.get_all_states, to='main.State'),
        ),
        migrations.AddField(
            model_name='ownerprofile',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owner_profile', to='main.detail'),
        ),
        migrations.AddField(
            model_name='event',
            name='owner',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='events', to='main.OwnerProfile'),
        ),
        migrations.AddField(
            model_name='event',
            name='trip',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='events', to='main.Trip'),
        ),
        migrations.AddField(
            model_name='event',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='events', to='main.detail'),
        ),
        migrations.AddField(
            model_name='event',
            name='vendor_trip',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='events', to='main.VendorTrip'),
        ),
        migrations.AddField(
            model_name='driverprofile',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='drivers', to='main.OwnerProfile'),
        ),
        migrations.AddField(
            model_name='customerprofile',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='customer_profile', to='main.detail'),
        ),
        migrations.AddField(
            model_name='coupon',
            name='vehicle_group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.VehicalGroup'),
        ),
        migrations.AddField(
            model_name='coupon',
            name='vehicle_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.VehicalType'),
        ),
        migrations.AddField(
            model_name='corporatecustomerprofile',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='corporate_customer_profile', to='main.CustomerProfile'),
        ),
        migrations.AddField(
            model_name='charges',
            name='car',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.VehicalType'),
        ),
        migrations.AddField(
            model_name='car',
            name='car_name',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='car', to='main.VehicalName'),
        ),
        migrations.AddField(
            model_name='car',
            name='company',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.CarCompany'),
        ),
        migrations.AddField(
            model_name='car',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cars', to='main.OwnerProfile'),
        ),
        migrations.AddField(
            model_name='car',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.CarType'),
        ),
    ]
